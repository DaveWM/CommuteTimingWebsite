Enumerable = function () { var e = function (e) { this.GetEnumerator = e }; e.Choice = function () { var n = arguments[0] instanceof Array ? arguments[0] : arguments; return new e(function () { return new s(t.Blank, function () { return this.Yield(n[Math.floor(Math.random() * n.length)]) }, t.Blank) }) }; e.Cycle = function () { var n = arguments[0] instanceof Array ? arguments[0] : arguments; return new e(function () { var e = 0; return new s(t.Blank, function () { if (e >= n.length) e = 0; return this.Yield(n[e++]) }, t.Blank) }) }; e.Empty = function () { return new e(function () { return new s(t.Blank, function () { return false }, t.Blank) }) }; e.From = function (i) { if (i == null) { return e.Empty() } if (i instanceof e) { return i } if (typeof i == n.Number || typeof i == n.Boolean) { return e.Repeat(i, 1) } if (typeof i == n.String) { return new e(function () { var e = 0; return new s(t.Blank, function () { return e < i.length ? this.Yield(i.charAt(e++)) : false }, t.Blank) }) } if (typeof i != n.Function) { if (typeof i.length == n.Number) { return new f(i) } if (!(i instanceof Object) && r.IsIEnumerable(i)) { return new e(function () { var e = true; var n; return new s(function () { n = new Enumerator(i) }, function () { if (e) e = false; else n.moveNext(); return n.atEnd() ? false : this.Yield(n.item()) }, t.Blank) }) } } return new e(function () { var e = []; var n = 0; return new s(function () { for (var t in i) { if (!(i[t] instanceof Function)) { e.push({ Key: t, Value: i[t] }) } } }, function () { return n < e.length ? this.Yield(e[n++]) : false }, t.Blank) }) }, e.Return = function (t) { return e.Repeat(t, 1) }; e.Matches = function (n, r, i) { if (i == null) i = ""; if (r instanceof RegExp) { i += r.ignoreCase ? "i" : ""; i += r.multiline ? "m" : ""; r = r.source } if (i.indexOf("g") === -1) i += "g"; return new e(function () { var e; return new s(function () { e = new RegExp(r, i) }, function () { var t = e.exec(n); return t ? this.Yield(t) : false }, t.Blank) }) }; e.Range = function (t, n, r) { if (r == null) r = 1; return e.ToInfinity(t, r).Take(n) }; e.RangeDown = function (t, n, r) { if (r == null) r = 1; return e.ToNegativeInfinity(t, r).Take(n) }; e.RangeTo = function (t, n, r) { if (r == null) r = 1; return t < n ? e.ToInfinity(t, r).TakeWhile(function (e) { return e <= n }) : e.ToNegativeInfinity(t, r).TakeWhile(function (e) { return e >= n }) }; e.Repeat = function (n, r) { if (r != null) return e.Repeat(n).Take(r); return new e(function () { return new s(t.Blank, function () { return this.Yield(n) }, t.Blank) }) }; e.RepeatWithFinalize = function (t, n) { t = r.CreateLambda(t); n = r.CreateLambda(n); return new e(function () { var e; return new s(function () { e = t() }, function () { return this.Yield(e) }, function () { if (e != null) { n(e); e = null } }) }) }; e.Generate = function (n, i) { if (i != null) return e.Generate(n).Take(i); n = r.CreateLambda(n); return new e(function () { return new s(t.Blank, function () { return this.Yield(n()) }, t.Blank) }) }; e.ToInfinity = function (n, r) { if (n == null) n = 0; if (r == null) r = 1; return new e(function () { var e; return new s(function () { e = n - r }, function () { return this.Yield(e += r) }, t.Blank) }) }; e.ToNegativeInfinity = function (n, r) { if (n == null) n = 0; if (r == null) r = 1; return new e(function () { var e; return new s(function () { e = n + r }, function () { return this.Yield(e -= r) }, t.Blank) }) }; e.Unfold = function (n, i) { i = r.CreateLambda(i); return new e(function () { var e = true; var r; return new s(t.Blank, function () { if (e) { e = false; r = n; return this.Yield(r) } r = i(r); return this.Yield(r) }, t.Blank) }) }; e.prototype = { CascadeBreadthFirst: function (t, n) { var i = this; t = r.CreateLambda(t); n = r.CreateLambda(n); return new e(function () { var o; var u = 0; var a = []; return new s(function () { o = i.GetEnumerator() }, function () { while (true) { if (o.MoveNext()) { a.push(o.Current()); return this.Yield(n(o.Current(), u)) } var i = e.From(a).SelectMany(function (e) { return t(e) }); if (!i.Any()) { return false } else { u++; a = []; r.Dispose(o); o = i.GetEnumerator() } } }, function () { r.Dispose(o) }) }) }, CascadeDepthFirst: function (t, n) { var i = this; t = r.CreateLambda(t); n = r.CreateLambda(n); return new e(function () { var o = []; var u; return new s(function () { u = i.GetEnumerator() }, function () { while (true) { if (u.MoveNext()) { var i = n(u.Current(), o.length); o.push(u); u = e.From(t(u.Current())).GetEnumerator(); return this.Yield(i) } if (o.length <= 0) return false; r.Dispose(u); u = o.pop() } }, function () { try { r.Dispose(u) } finally { e.From(o).ForEach(function (e) { e.Dispose() }) } }) }) }, Flatten: function () { var n = this; return new e(function () { var i; var o = null; return new s(function () { i = n.GetEnumerator() }, function () { while (true) { if (o != null) { if (o.MoveNext()) { return this.Yield(o.Current()) } else { o = null } } if (i.MoveNext()) { if (i.Current() instanceof Array) { r.Dispose(o); o = e.From(i.Current()).SelectMany(t.Identity).Flatten().GetEnumerator(); continue } else { return this.Yield(i.Current()) } } return false } }, function () { try { r.Dispose(i) } finally { r.Dispose(o) } }) }) }, Pairwise: function (t) { var n = this; t = r.CreateLambda(t); return new e(function () { var e; return new s(function () { e = n.GetEnumerator(); e.MoveNext() }, function () { var n = e.Current(); return e.MoveNext() ? this.Yield(t(n, e.Current())) : false }, function () { r.Dispose(e) }) }) }, Scan: function (t, n, i) { if (i != null) return this.Scan(t, n).Select(i); var o; if (n == null) { n = r.CreateLambda(t); o = false } else { n = r.CreateLambda(n); o = true } var u = this; return new e(function () { var e; var i; var a = true; return new s(function () { e = u.GetEnumerator() }, function () { if (a) { a = false; if (!o) { if (e.MoveNext()) { return this.Yield(i = e.Current()) } } else { return this.Yield(i = t) } } return e.MoveNext() ? this.Yield(i = n(i, e.Current())) : false }, function () { r.Dispose(e) }) }) }, Select: function (t) { var n = this; t = r.CreateLambda(t); return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator() }, function () { return e.MoveNext() ? this.Yield(t(e.Current(), i++)) : false }, function () { r.Dispose(e) }) }) }, SelectMany: function (t, n) { var i = this; t = r.CreateLambda(t); if (n == null) n = function (e, t) { return t }; n = r.CreateLambda(n); return new e(function () { var o; var u = undefined; var a = 0; return new s(function () { o = i.GetEnumerator() }, function () { if (u === undefined) { if (!o.MoveNext()) return false } do { if (u == null) { var i = t(o.Current(), a++); u = e.From(i).GetEnumerator() } if (u.MoveNext()) { return this.Yield(n(o.Current(), u.Current())) } r.Dispose(u); u = null } while (o.MoveNext()); return false }, function () { try { r.Dispose(o) } finally { r.Dispose(u) } }) }) }, Where: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator() }, function () { while (e.MoveNext()) { if (t(e.Current(), i++)) { return this.Yield(e.Current()) } } return false }, function () { r.Dispose(e) }) }) }, OfType: function (e) { var t; switch (e) { case Number: t = n.Number; break; case String: t = n.String; break; case Boolean: t = n.Boolean; break; case Function: t = n.Function; break; default: t = null; break } return t === null ? this.Where(function (t) { return t instanceof e }) : this.Where(function (e) { return typeof e === t }) }, Zip: function (t, n) { n = r.CreateLambda(n); var i = this; return new e(function () { var o; var u; var a = 0; return new s(function () { o = i.GetEnumerator(); u = e.From(t).GetEnumerator() }, function () { if (o.MoveNext() && u.MoveNext()) { return this.Yield(n(o.Current(), u.Current(), a++)) } return false }, function () { try { r.Dispose(o) } finally { r.Dispose(u) } }) }) }, Join: function (n, i, o, u, a) { i = r.CreateLambda(i); o = r.CreateLambda(o); u = r.CreateLambda(u); a = r.CreateLambda(a); var f = this; return new e(function () { var l; var c; var h = null; var p = 0; return new s(function () { l = f.GetEnumerator(); c = e.From(n).ToLookup(o, t.Identity, a) }, function () { while (true) { if (h != null) { var e = h[p++]; if (e !== undefined) { return this.Yield(u(l.Current(), e)) } e = null; p = 0 } if (l.MoveNext()) { var t = i(l.Current()); h = c.Get(t).ToArray() } else { return false } } }, function () { r.Dispose(l) }) }) }, GroupJoin: function (n, i, o, u, a) { i = r.CreateLambda(i); o = r.CreateLambda(o); u = r.CreateLambda(u); a = r.CreateLambda(a); var f = this; return new e(function () { var l = f.GetEnumerator(); var c = null; return new s(function () { l = f.GetEnumerator(); c = e.From(n).ToLookup(o, t.Identity, a) }, function () { if (l.MoveNext()) { var e = c.Get(i(l.Current())); return this.Yield(u(l.Current(), e)) } return false }, function () { r.Dispose(l) }) }) }, All: function (e) { e = r.CreateLambda(e); var t = true; this.ForEach(function (n) { if (!e(n)) { t = false; return false } }); return t }, Any: function (e) { e = r.CreateLambda(e); var t = this.GetEnumerator(); try { if (arguments.length == 0) return t.MoveNext(); while (t.MoveNext()) { if (e(t.Current())) return true } return false } finally { r.Dispose(t) } }, Concat: function (t) { var n = this; return new e(function () { var i; var o; return new s(function () { i = n.GetEnumerator() }, function () { if (o == null) { if (i.MoveNext()) return this.Yield(i.Current()); o = e.From(t).GetEnumerator() } if (o.MoveNext()) return this.Yield(o.Current()); return false }, function () { try { r.Dispose(i) } finally { r.Dispose(o) } }) }) }, Insert: function (t, n) { var i = this; return new e(function () { var o; var u; var a = 0; var f = false; return new s(function () { o = i.GetEnumerator(); u = e.From(n).GetEnumerator() }, function () { if (a == t && u.MoveNext()) { f = true; return this.Yield(u.Current()) } if (o.MoveNext()) { a++; return this.Yield(o.Current()) } if (!f && u.MoveNext()) { return this.Yield(u.Current()) } return false }, function () { try { r.Dispose(o) } finally { r.Dispose(u) } }) }) }, Alternate: function (t) { t = e.Return(t); return this.SelectMany(function (n) { return e.Return(n).Concat(t) }).TakeExceptLast() }, Contains: function (e, t) { t = r.CreateLambda(t); var n = this.GetEnumerator(); try { while (n.MoveNext()) { if (t(n.Current()) === e) return true } return false } finally { r.Dispose(n) } }, DefaultIfEmpty: function (t) { var n = this; return new e(function () { var e; var i = true; return new s(function () { e = n.GetEnumerator() }, function () { if (e.MoveNext()) { i = false; return this.Yield(e.Current()) } else if (i) { i = false; return this.Yield(t) } return false }, function () { r.Dispose(e) }) }) }, Distinct: function (t) { return this.Except(e.Empty(), t) }, Except: function (t, n) { n = r.CreateLambda(n); var i = this; return new e(function () { var o; var u; return new s(function () { o = i.GetEnumerator(); u = new l(n); e.From(t).ForEach(function (e) { u.Add(e) }) }, function () { while (o.MoveNext()) { var e = o.Current(); if (!u.Contains(e)) { u.Add(e); return this.Yield(e) } } return false }, function () { r.Dispose(o) }) }) }, Intersect: function (t, n) { n = r.CreateLambda(n); var i = this; return new e(function () { var o; var u; var a; return new s(function () { o = i.GetEnumerator(); u = new l(n); e.From(t).ForEach(function (e) { u.Add(e) }); a = new l(n) }, function () { while (o.MoveNext()) { var e = o.Current(); if (!a.Contains(e) && u.Contains(e)) { a.Add(e); return this.Yield(e) } } return false }, function () { r.Dispose(o) }) }) }, SequenceEqual: function (t, n) { n = r.CreateLambda(n); var i = this.GetEnumerator(); try { var s = e.From(t).GetEnumerator(); try { while (i.MoveNext()) { if (!s.MoveNext() || n(i.Current()) !== n(s.Current())) { return false } } if (s.MoveNext()) return false; return true } finally { r.Dispose(s) } } finally { r.Dispose(i) } }, Union: function (t, n) { n = r.CreateLambda(n); var i = this; return new e(function () { var o; var u; var a; return new s(function () { o = i.GetEnumerator(); a = new l(n) }, function () { var n; if (u === undefined) { while (o.MoveNext()) { n = o.Current(); if (!a.Contains(n)) { a.Add(n); return this.Yield(n) } } u = e.From(t).GetEnumerator() } while (u.MoveNext()) { n = u.Current(); if (!a.Contains(n)) { a.Add(n); return this.Yield(n) } } return false }, function () { try { r.Dispose(o) } finally { r.Dispose(u) } }) }) }, OrderBy: function (e) { return new u(this, e, false) }, OrderByDescending: function (e) { return new u(this, e, true) }, Reverse: function () { var n = this; return new e(function () { var e; var r; return new s(function () { e = n.ToArray(); r = e.length }, function () { return r > 0 ? this.Yield(e[--r]) : false }, t.Blank) }) }, Shuffle: function () { var n = this; return new e(function () { var e; return new s(function () { e = n.ToArray() }, function () { if (e.length > 0) { var t = Math.floor(Math.random() * e.length); return this.Yield(e.splice(t, 1)[0]) } return false }, t.Blank) }) }, GroupBy: function (t, n, i, o) { var u = this; t = r.CreateLambda(t); n = r.CreateLambda(n); if (i != null) i = r.CreateLambda(i); o = r.CreateLambda(o); return new e(function () { var e; return new s(function () { e = u.ToLookup(t, n, o).ToEnumerable().GetEnumerator() }, function () { while (e.MoveNext()) { return i == null ? this.Yield(e.Current()) : this.Yield(i(e.Current().Key(), e.Current())) } return false }, function () { r.Dispose(e) }) }) }, PartitionBy: function (t, n, i, o) { var u = this; t = r.CreateLambda(t); n = r.CreateLambda(n); o = r.CreateLambda(o); var a; if (i == null) { a = false; i = function (e, t) { return new h(e, t) } } else { a = true; i = r.CreateLambda(i) } return new e(function () { var f; var l; var c; var h = []; return new s(function () { f = u.GetEnumerator(); if (f.MoveNext()) { l = t(f.Current()); c = o(l); h.push(n(f.Current())) } }, function () { var r; while ((r = f.MoveNext()) == true) { if (c === o(t(f.Current()))) { h.push(n(f.Current())) } else break } if (h.length > 0) { var s = a ? i(l, e.From(h)) : i(l, h); if (r) { l = t(f.Current()); c = o(l); h = [n(f.Current())] } else h = []; return this.Yield(s) } return false }, function () { r.Dispose(f) }) }) }, BufferWithCount: function (t) { var n = this; return new e(function () { var e; return new s(function () { e = n.GetEnumerator() }, function () { var n = []; var r = 0; while (e.MoveNext()) { n.push(e.Current()); if (++r >= t) return this.Yield(n) } if (n.length > 0) return this.Yield(n); return false }, function () { r.Dispose(e) }) }) }, Aggregate: function (e, t, n) { return this.Scan(e, t, n).Last() }, Average: function (e) { e = r.CreateLambda(e); var t = 0; var n = 0; this.ForEach(function (r) { t += e(r); ++n }); return t / n }, StandardDeviation: function (e) { e = r.CreateLambda(e); var t = this.Average(e); var n = 0; var i = 0; this.ForEach(function (r) { n += Math.pow(e(r) - t, 2); ++i }); return Math.pow(n / i, .5) }, Count: function (e) { e = e == null ? t.True : r.CreateLambda(e); var n = 0; this.ForEach(function (t, r) { if (e(t, r))++n }); return n }, Max: function (e) { if (e == null) e = t.Identity; return this.Select(e).Aggregate(function (e, t) { return e > t ? e : t }) }, Min: function (e) { if (e == null) e = t.Identity; return this.Select(e).Aggregate(function (e, t) { return e < t ? e : t }) }, MaxBy: function (e) { e = r.CreateLambda(e); return this.Aggregate(function (t, n) { return e(t) > e(n) ? t : n }) }, MinBy: function (e) { e = r.CreateLambda(e); return this.Aggregate(function (t, n) { return e(t) < e(n) ? t : n }) }, Sum: function (e) { if (e == null) e = t.Identity; return this.Select(e).Aggregate(0, function (e, t) { return e + t }) }, ElementAt: function (e) { var t; var n = false; this.ForEach(function (r, i) { if (i == e) { t = r; n = true; return false } }); if (!n) throw new Error("index is less than 0 or greater than or equal to the number of elements in source."); return t }, ElementAtOrDefault: function (e, t) { var n; var r = false; this.ForEach(function (t, i) { if (i == e) { n = t; r = true; return false } }); return !r ? t : n }, First: function (e) { if (e != null) return this.Where(e).First(); var t; var n = false; this.ForEach(function (e) { t = e; n = true; return false }); if (!n) throw new Error("First:No element satisfies the condition."); return t }, FirstOrDefault: function (e, t) { if (t != null) return this.Where(t).FirstOrDefault(e); var n; var r = false; this.ForEach(function (e) { n = e; r = true; return false }); return !r ? e : n }, Last: function (e) { if (e != null) return this.Where(e).Last(); var t; var n = false; this.ForEach(function (e) { n = true; t = e }); if (!n) throw new Error("Last:No element satisfies the condition."); return t }, LastOrDefault: function (e, t) { if (t != null) return this.Where(t).LastOrDefault(e); var n; var r = false; this.ForEach(function (e) { r = true; n = e }); return !r ? e : n }, Single: function (e) { if (e != null) return this.Where(e).Single(); var t; var n = false; this.ForEach(function (e) { if (!n) { n = true; t = e } else throw new Error("Single:sequence contains more than one element.") }); if (!n) throw new Error("Single:No element satisfies the condition."); return t }, SingleOrDefault: function (e, t) { if (t != null) return this.Where(t).SingleOrDefault(e); var n; var r = false; this.ForEach(function (e) { if (!r) { r = true; n = e } else throw new Error("Single:sequence contains more than one element.") }); return !r ? e : n }, Skip: function (t) { var n = this; return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator(); while (i++ < t && e.MoveNext()) { } }, function () { return e.MoveNext() ? this.Yield(e.Current()) : false }, function () { r.Dispose(e) }) }) }, SkipWhile: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var e; var i = 0; var o = false; return new s(function () { e = n.GetEnumerator() }, function () { while (!o) { if (e.MoveNext()) { if (!t(e.Current(), i++)) { o = true; return this.Yield(e.Current()) } continue } else return false } return e.MoveNext() ? this.Yield(e.Current()) : false }, function () { r.Dispose(e) }) }) }, Take: function (t) { var n = this; return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator() }, function () { return i++ < t && e.MoveNext() ? this.Yield(e.Current()) : false }, function () { r.Dispose(e) }) }) }, TakeWhile: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator() }, function () { return e.MoveNext() && t(e.Current(), i++) ? this.Yield(e.Current()) : false }, function () { r.Dispose(e) }) }) }, TakeExceptLast: function (t) { if (t == null) t = 1; var n = this; return new e(function () { if (t <= 0) return n.GetEnumerator(); var e; var i = []; return new s(function () { e = n.GetEnumerator() }, function () { while (e.MoveNext()) { if (i.length == t) { i.push(e.Current()); return this.Yield(i.shift()) } i.push(e.Current()) } return false }, function () { r.Dispose(e) }) }) }, TakeFromLast: function (t) { if (t <= 0 || t == null) return e.Empty(); var n = this; return new e(function () { var i; var o; var u = []; return new s(function () { i = n.GetEnumerator() }, function () { while (i.MoveNext()) { if (u.length == t) u.shift(); u.push(i.Current()) } if (o == null) { o = e.From(u).GetEnumerator() } return o.MoveNext() ? this.Yield(o.Current()) : false }, function () { r.Dispose(o) }) }) }, IndexOf: function (e) { var t = null; this.ForEach(function (n, r) { if (n === e) { t = r; return true } }); return t !== null ? t : -1 }, LastIndexOf: function (e) { var t = -1; this.ForEach(function (n, r) { if (n === e) t = r }); return t }, ToArray: function () { var e = []; this.ForEach(function (t) { e.push(t) }); return e }, ToLookup: function (e, t, n) { e = r.CreateLambda(e); t = r.CreateLambda(t); n = r.CreateLambda(n); var i = new l(n); this.ForEach(function (n) { var r = e(n); var s = t(n); var o = i.Get(r); if (o !== undefined) o.push(s); else i.Add(r, [s]) }); return new c(i) }, ToObject: function (e, t) { e = r.CreateLambda(e); t = r.CreateLambda(t); var n = {}; this.ForEach(function (r) { n[e(r)] = t(r) }); return n }, ToDictionary: function (e, t, n) { e = r.CreateLambda(e); t = r.CreateLambda(t); n = r.CreateLambda(n); var i = new l(n); this.ForEach(function (n) { i.Add(e(n), t(n)) }); return i }, ToJSON: function (e, t) { return JSON.stringify(this.ToArray(), e, t) }, ToString: function (e, n) { if (e == null) e = ""; if (n == null) n = t.Identity; return this.Select(n).ToArray().join(e) }, Do: function (t) { var n = this; t = r.CreateLambda(t); return new e(function () { var e; var i = 0; return new s(function () { e = n.GetEnumerator() }, function () { if (e.MoveNext()) { t(e.Current(), i++); return this.Yield(e.Current()) } return false }, function () { r.Dispose(e) }) }) }, ForEach: function (e) { e = r.CreateLambda(e); var t = 0; var n = this.GetEnumerator(); try { while (n.MoveNext()) { if (e(n.Current(), t++) === false) break } } finally { r.Dispose(n) } }, Write: function (e, t) { if (e == null) e = ""; t = r.CreateLambda(t); var n = true; this.ForEach(function (r) { if (n) n = false; else document.write(e); document.write(t(r)) }) }, WriteLine: function (e) { e = r.CreateLambda(e); this.ForEach(function (t) { document.write(e(t)); document.write("<br />") }) }, Force: function () { var e = this.GetEnumerator(); try { while (e.MoveNext()) { } } finally { r.Dispose(e) } }, Let: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var i; return new s(function () { i = e.From(t(n)).GetEnumerator() }, function () { return i.MoveNext() ? this.Yield(i.Current()) : false }, function () { r.Dispose(i) }) }) }, Share: function () { var n = this; var r; return new e(function () { return new s(function () { if (r == null) { r = n.GetEnumerator() } }, function () { return r.MoveNext() ? this.Yield(r.Current()) : false }, t.Blank) }) }, MemoizeAll: function () { var n = this; var r; var i; return new e(function () { var e = -1; return new s(function () { if (i == null) { i = n.GetEnumerator(); r = [] } }, function () { e++; if (r.length <= e) { return i.MoveNext() ? this.Yield(r[e] = i.Current()) : false } return this.Yield(r[e]) }, t.Blank) }) }, Catch: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var e; return new s(function () { e = n.GetEnumerator() }, function () { try { return e.MoveNext() ? this.Yield(e.Current()) : false } catch (n) { t(n); return false } }, function () { r.Dispose(e) }) }) }, Finally: function (t) { t = r.CreateLambda(t); var n = this; return new e(function () { var e; return new s(function () { e = n.GetEnumerator() }, function () { return e.MoveNext() ? this.Yield(e.Current()) : false }, function () { try { r.Dispose(e) } finally { t() } }) }) }, Trace: function (e, t) { if (e == null) e = "Trace"; t = r.CreateLambda(t); return this.Do(function (n) { console.log(e, ":", t(n)) }) } }; var t = { Identity: function (e) { return e }, True: function () { return true }, Blank: function () { } }; var n = { Boolean: typeof true, Number: typeof 0, String: typeof "", Object: typeof {}, Undefined: typeof undefined, Function: typeof function () { } }; var r = { CreateLambda: function (e) { if (e == null) return t.Identity; if (typeof e == n.String) { if (e == "") { return t.Identity } else if (e.indexOf("=>") == -1) { return new Function("$,$$,$$$,$$$$", "return " + e) } else { var r = e.match(/^[(\s]*([^()]*?)[)\s]*=>(.*)/); return new Function(r[1], "return " + r[2]) } } return e }, IsIEnumerable: function (e) { if (typeof Enumerator != n.Undefined) { try { new Enumerator(e); return true } catch (t) { } } return false }, Compare: function (e, t) { return e === t ? 0 : e > t ? 1 : -1 }, Dispose: function (e) { if (e != null) e.Dispose() } }; var i = { Before: 0, Running: 1, After: 2 }; var s = function (e, t, n) { var r = new o; var s = i.Before; this.Current = r.Current; this.MoveNext = function () { try { switch (s) { case i.Before: s = i.Running; e(); case i.Running: if (t.apply(r)) { return true } else { this.Dispose(); return false }; case i.After: return false } } catch (n) { this.Dispose(); throw n } }; this.Dispose = function () { if (s != i.Running) return; try { n() } finally { s = i.After } } }; var o = function () { var e = null; this.Current = function () { return e }; this.Yield = function (t) { e = t; return true } }; var u = function (e, t, n, i) { this.source = e; this.keySelector = r.CreateLambda(t); this.descending = n; this.parent = i }; u.prototype = new e; u.prototype.CreateOrderedEnumerable = function (e, t) { return new u(this.source, e, t, this) }; u.prototype.ThenBy = function (e) { return this.CreateOrderedEnumerable(e, false) }; u.prototype.ThenByDescending = function (e) { return this.CreateOrderedEnumerable(e, true) }; u.prototype.GetEnumerator = function () { var e = this; var n; var r; var i = 0; return new s(function () { n = []; r = []; e.source.ForEach(function (e, t) { n.push(e); r.push(t) }); var t = a.Create(e, null); t.GenerateKeys(n); r.sort(function (e, n) { return t.Compare(e, n) }) }, function () { return i < r.length ? this.Yield(n[r[i++]]) : false }, t.Blank) }; var a = function (e, t, n) { this.keySelector = e; this.descending = t; this.child = n; this.keys = null }; a.Create = function (e, t) { var n = new a(e.keySelector, e.descending, t); if (e.parent != null) return a.Create(e.parent, n); return n }; a.prototype.GenerateKeys = function (e) { var t = e.length; var n = this.keySelector; var r = new Array(t); for (var i = 0; i < t; i++) r[i] = n(e[i]); this.keys = r; if (this.child != null) this.child.GenerateKeys(e) }; a.prototype.Compare = function (e, t) { var n = r.Compare(this.keys[e], this.keys[t]); if (n == 0) { if (this.child != null) return this.child.Compare(e, t); n = r.Compare(e, t) } return this.descending ? -n : n }; var f = function (e) { this.source = e }; f.prototype = new e; f.prototype.Any = function (t) { return t == null ? this.source.length > 0 : e.prototype.Any.apply(this, arguments) }; f.prototype.Count = function (t) { return t == null ? this.source.length : e.prototype.Count.apply(this, arguments) }; f.prototype.ElementAt = function (t) { return 0 <= t && t < this.source.length ? this.source[t] : e.prototype.ElementAt.apply(this, arguments) }; f.prototype.ElementAtOrDefault = function (e, t) { return 0 <= e && e < this.source.length ? this.source[e] : t }; f.prototype.First = function (t) { return t == null && this.source.length > 0 ? this.source[0] : e.prototype.First.apply(this, arguments) }; f.prototype.FirstOrDefault = function (t, n) { if (n != null) { return e.prototype.FirstOrDefault.apply(this, arguments) } return this.source.length > 0 ? this.source[0] : t }; f.prototype.Last = function (t) { return t == null && this.source.length > 0 ? this.source[this.source.length - 1] : e.prototype.Last.apply(this, arguments) }; f.prototype.LastOrDefault = function (t, n) { if (n != null) { return e.prototype.LastOrDefault.apply(this, arguments) } return this.source.length > 0 ? this.source[this.source.length - 1] : t }; f.prototype.Skip = function (n) { var r = this.source; return new e(function () { var e; return new s(function () { e = n < 0 ? 0 : n }, function () { return e < r.length ? this.Yield(r[e++]) : false }, t.Blank) }) }; f.prototype.TakeExceptLast = function (e) { if (e == null) e = 1; return this.Take(this.source.length - e) }; f.prototype.TakeFromLast = function (e) { return this.Skip(this.source.length - e) }; f.prototype.Reverse = function () { var n = this.source; return new e(function () { var e; return new s(function () { e = n.length }, function () { return e > 0 ? this.Yield(n[--e]) : false }, t.Blank) }) }; f.prototype.SequenceEqual = function (t, n) { if ((t instanceof f || t instanceof Array) && n == null && e.From(t).Count() != this.Count()) { return false } return e.prototype.SequenceEqual.apply(this, arguments) }; f.prototype.ToString = function (t, n) { if (n != null || !(this.source instanceof Array)) { return e.prototype.ToString.apply(this, arguments) } if (t == null) t = ""; return this.source.join(t) }; f.prototype.GetEnumerator = function () { var e = this.source; var n = 0; return new s(t.Blank, function () { return n < e.length ? this.Yield(e[n++]) : false }, t.Blank) }; var l = function () { var r = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }; var i = function (e) { if (e === null) return "null"; if (e === undefined) return "undefined"; return typeof e.toString === n.Function ? e.toString() : Object.prototype.toString.call(e) }; var o = function (e, t) { this.Key = e; this.Value = t; this.Prev = null; this.Next = null }; var u = function () { this.First = null; this.Last = null }; u.prototype = { AddLast: function (e) { if (this.Last != null) { this.Last.Next = e; e.Prev = this.Last; this.Last = e } else this.First = this.Last = e }, Replace: function (e, t) { if (e.Prev != null) { e.Prev.Next = t; t.Prev = e.Prev } else this.First = t; if (e.Next != null) { e.Next.Prev = t; t.Next = e.Next } else this.Last = t }, Remove: function (e) { if (e.Prev != null) e.Prev.Next = e.Next; else this.First = e.Next; if (e.Next != null) e.Next.Prev = e.Prev; else this.Last = e.Prev } }; var a = function (e) { this.count = 0; this.entryList = new u; this.buckets = {}; this.compareSelector = e == null ? t.Identity : e }; a.prototype = { Add: function (e, t) { var n = this.compareSelector(e); var s = i(n); var u = new o(e, t); if (r(this.buckets, s)) { var a = this.buckets[s]; for (var f = 0; f < a.length; f++) { if (this.compareSelector(a[f].Key) === n) { this.entryList.Replace(a[f], u); a[f] = u; return } } a.push(u) } else { this.buckets[s] = [u] } this.count++; this.entryList.AddLast(u) }, Get: function (e) { var t = this.compareSelector(e); var n = i(t); if (!r(this.buckets, n)) return undefined; var s = this.buckets[n]; for (var o = 0; o < s.length; o++) { var u = s[o]; if (this.compareSelector(u.Key) === t) return u.Value } return undefined }, Set: function (e, t) { var n = this.compareSelector(e); var s = i(n); if (r(this.buckets, s)) { var u = this.buckets[s]; for (var a = 0; a < u.length; a++) { if (this.compareSelector(u[a].Key) === n) { var f = new o(e, t); this.entryList.Replace(u[a], f); u[a] = f; return true } } } return false }, Contains: function (e) { var t = this.compareSelector(e); var n = i(t); if (!r(this.buckets, n)) return false; var s = this.buckets[n]; for (var o = 0; o < s.length; o++) { if (this.compareSelector(s[o].Key) === t) return true } return false }, Clear: function () { this.count = 0; this.buckets = {}; this.entryList = new u }, Remove: function (e) { var t = this.compareSelector(e); var n = i(t); if (!r(this.buckets, n)) return; var s = this.buckets[n]; for (var o = 0; o < s.length; o++) { if (this.compareSelector(s[o].Key) === t) { this.entryList.Remove(s[o]); s.splice(o, 1); if (s.length == 0) delete this.buckets[n]; this.count--; return } } }, Count: function () { return this.count }, ToEnumerable: function () { var n = this; return new e(function () { var e; return new s(function () { e = n.entryList.First }, function () { if (e != null) { var t = { Key: e.Key, Value: e.Value }; e = e.Next; return this.Yield(t) } return false }, t.Blank) }) } }; return a }(); var c = function (t) { this.Count = function () { return t.Count() }; this.Get = function (n) { return e.From(t.Get(n)) }; this.Contains = function (e) { return t.Contains(e) }; this.ToEnumerable = function () { return t.ToEnumerable().Select(function (e) { return new h(e.Key, e.Value) }) } }; var h = function (e, t) { this.Key = function () { return e }; f.call(this, t) }; h.prototype = new f; return e }()